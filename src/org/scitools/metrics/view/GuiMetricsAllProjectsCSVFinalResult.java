/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.scitools.metrics.view;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import org.scitools.metrics.control.CGAllFInalResults;
import org.scitools.metrics.model.beans.FinalResult;
import org.scitools.metrics.model.util.RWArquivoNew;

/**
 *
 * @author fernando
 */
public class GuiMetricsAllProjectsCSVFinalResult extends javax.swing.JFrame {

	private static final long serialVersionUID = 8413777465306920508L;
	private ArrayList<String> filesNames;
    private String pathOrigem = "";

    /**
     * Creates new form GuiMetrics
     */
    public GuiMetricsAllProjectsCSVFinalResult() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Select Percentile Files");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        jLabel1.setText("Select the csv Files");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Metric", "Percentile%", "k", "Outlayers"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jButton2.setText("Save .csv");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("is New Pattern");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jCheckBox1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /*
     * Botão responsável por selecionar arquivos de entrada
     */

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser arquivo = new JFileChooser();
        arquivo.setMultiSelectionEnabled(true);
        arquivo.setFileFilter(new javax.swing.filechooser.FileFilter() {
            //Filtro, converte as letras em minúsculas antes de comparar
            public boolean accept(File f) {
                return (f.getName().toLowerCase().endsWith(".csv") && f.getName().toLowerCase().startsWith("weigth")) || f.isDirectory();
            }
            //Texto que será exibido para o usuário

            public String getDescription() {
                return "Files (.csv)";
            }
        });


        int retorno = arquivo.showOpenDialog(null);
        if (retorno == JFileChooser.APPROVE_OPTION) {
            //jButton2.setEnabled(true);

            File[] files = arquivo.getSelectedFiles();
            filesNames = new ArrayList<String>();

            for (int i = 0; i < files.length; i++) {
                filesNames.add(files[i].getName());
            }
            pathOrigem = files[0].getParent();
            jList1.setListData(filesNames.toArray());
            //nomePrimeiroArquivo = files[0].getName();
        } else {
            JOptionPane.showMessageDialog(null, "Invalid File");
        }

        CGAllFInalResults gafr = new CGAllFInalResults();
        ArrayList<FinalResult> fr = gafr.geraFinalResults(pathOrigem, filesNames);
        jTable1.removeAll();
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setNumRows(0);
        String caminhoDefault = "";
        ArrayList<String> arquivos = null;
        if (JOptionPane.showConfirmDialog(null, "Do you like view outlayer list?") == 0) {
            JOptionPane.showMessageDialog(null, "Select default files...");
            JFileChooser arquivo1 = new JFileChooser(pathOrigem);
            arquivo1.setMultiSelectionEnabled(true);

            arquivo1.setFileFilter(new javax.swing.filechooser.FileFilter() {
                //Filtro, converte as letras em minúsculas antes de comparar
                public boolean accept(File f) {
                    return (f.getName().toLowerCase().endsWith(".csv") && !f.getName().toLowerCase().contains("metric") && !f.getName().toLowerCase().contains("mtt")) || f.isDirectory();
                }
                //Texto que será exibido para o usuário

                public String getDescription() {
                    return "Files (.csv)";
                }
            });


            retorno = arquivo1.showOpenDialog(null);
            if (retorno == JFileChooser.APPROVE_OPTION) {
                //jButton2.setEnabled(true);

                File[] files = arquivo1.getSelectedFiles();
                arquivos = new ArrayList<String>();

                for (int i = 0; i < files.length; i++) {
                    arquivos.add(files[i].getName());
                }
                caminhoDefault = files[0].getParent();

                //nomePrimeiroArquivo = files[0].getName();
            } else {
                JOptionPane.showMessageDialog(null, "Invalid File");
            }
            ArrayList<StringBuffer> outlayers=null;
            
           
            outlayers = gafr.geraOutlayers(caminhoDefault, arquivos, fr, jCheckBox1.isSelected());
            
            
            for (int i = 0; i < fr.size(); i++) {
                dtm.addRow(new Object[]{fr.get(i).getMetrica(), fr.get(i).getPercentil() + "%", fr.get(i).getK() + "", outlayers.get(i).toString()});
            }
        } else {
            for (int i = 0; i < fr.size(); i++) {
                dtm.addRow(new Object[]{fr.get(i).getMetrica(), fr.get(i).getPercentil() + "%", fr.get(i).getK() + ""});
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        StringBuffer saida = new StringBuffer();
        saida.append("metric,percentile,k,outlayers\n");
        for (int i = 0; i < dtm.getRowCount(); i++) {
            saida.append(dtm.getValueAt(i, 0));
            saida.append(",");
            saida.append(dtm.getValueAt(i, 1));
            saida.append(",");
            saida.append(dtm.getValueAt(i, 2));
            saida.append(",");
            saida.append(dtm.getValueAt(i, 3));
            saida.append("\n");
        }

        RWArquivoNew rw = new RWArquivoNew();

        JFileChooser arquivo = new JFileChooser();
        arquivo.setDialogType(JFileChooser.SAVE_DIALOG);
        arquivo.setMultiSelectionEnabled(false);
        //arquivo.setApproveButtonText("Save");

        arquivo.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int retorno = arquivo.showSaveDialog(null);
        if (retorno == JFileChooser.APPROVE_OPTION) {
            //jButton2.setEnabled(true);
            //jTextField1.setText(arquivo.getSelectedFile().getAbsolutePath());
            rw.setUrl(arquivo.getSelectedFile().getAbsolutePath() + "//FinalResult.csv");

        } else {
            JOptionPane.showMessageDialog(null, "Inválid Folder");
        }




        try {
            rw.criaArq();
            rw.escreveLinha(saida);
            rw.fechaArq();
        } catch (IOException x) {
            System.err.println("Erro na gravação");
            JOptionPane.showMessageDialog(null, "Error of file.");
        } catch (Exception x) {
            JOptionPane.showMessageDialog(null, "Error of file.");
            x.printStackTrace();
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuiMetricsAllProjectsCSVFinalResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuiMetricsAllProjectsCSVFinalResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuiMetricsAllProjectsCSVFinalResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuiMetricsAllProjectsCSVFinalResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GuiMetricsAllProjectsCSVFinalResult().setVisible(true);
            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
